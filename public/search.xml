<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[javascript正则表达式]]></title>
      <url>http://arlendp.me/web/js/javascript-regex/</url>
      <content type="html"><![CDATA[<p>正则表达式常用作检索、匹配或者替换文本，它是一种文本模式匹配的方法，在我们对复杂文本进行操作时，使用正则表达式会极大的简化我们的操作。本文将介绍正则表达式对象和匹配规则。<br><a id="more"></a></p>
<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>正则表达式是一种表示文本模式的方法，常用于匹配文本，例如email地址的验证等等，js中的正则表达式是Perl 5的子集。</p>
<p>正则表达式有两种写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/abc/</span>;</div><div class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"abc"</span>);</div></pre></td></tr></table></figure>
<p>上述两种写法的主要区别在于新建正则表达式的时间，前者是在编译时完成，后者则是在运行时完成。</p>
<h2 id="2-正则表达式对象"><a href="#2-正则表达式对象" class="headerlink" title="2. 正则表达式对象"></a>2. 正则表达式对象</h2><h3 id="2-1-属性"><a href="#2-1-属性" class="headerlink" title="2.1 属性"></a>2.1 属性</h3><p>正则表达式对象的属性主要有5个：</p>
<ul>
<li>与修饰符相关，都返回布尔值并且都是只读属性：<ul>
<li>ignoreCase：表示是否设置了i修饰符</li>
<li>global：表示是否设置了g修饰符</li>
<li>multiline：表示是否设置m修饰符</li>
</ul>
</li>
<li>与修饰符无关：<ul>
<li>lastIndex：返回下一次开始搜索的位置，<strong>且只在设置了g修饰符时才有意义</strong>。</li>
<li>source：返回正则表达式相应的字符串形式。</li>
</ul>
</li>
</ul>
<h3 id="2-2-方法（正则表达式）"><a href="#2-2-方法（正则表达式）" class="headerlink" title="2.2 方法（正则表达式）"></a>2.2 方法（正则表达式）</h3><ul>
<li><p><code>test()</code></p>
<ul>
<li>test接收一个字符串用于验证该字符串能否被匹配，结果返回布尔值。</li>
<li>若正则表达式字符串为空，则能匹配所有字符串。</li>
</ul>
</li>
<li><p><code>exec()</code></p>
<ul>
<li>exec接收一个字符串并且以数组的形式返回匹配结果，含有每一个匹配成功的子字符串，若匹配失败则返回null。</li>
<li>返回的数组含有两个属性：<ul>
<li><code>input</code>：表示原字符串</li>
<li><code>index</code>：表示模式匹配成功的开始位置</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-3-方法（字符串）"><a href="#2-3-方法（字符串）" class="headerlink" title="2.3 方法（字符串）"></a>2.3 方法（字符串）</h3><ul>
<li>match()：返回一个数组，成员是所有匹配的子字符串。<ul>
<li>该方法与正则表达式的<code>exec</code>方法类似</li>
<li>如果正则表达式带有<code>g</code>修饰符，该方法会返回所有匹配的结果，而<code>exec</code>则不会。</li>
<li>设置<code>lastIndex</code>属性对其无效。</li>
</ul>
</li>
<li>search()：按照给定的正则表达式进行搜索，返回一个整数，表示匹配开始的位置。若不匹配则返回-1.（<strong>忽略g修饰符和lastIndex属性</strong>）。</li>
<li>replace()：按照给定的正则表达式进行替换，返回替换后的字符串。<ul>
<li>有两个参数，第一个是搜索的模式，第二个是替换的内容。</li>
<li>搜索模式如果不加g修饰符，则替换第一个匹配的结果，否则替换所有的匹配结果。</li>
<li>该方法的第二个参数可以使用<code>$</code>来指代所替换的内容。<ul>
<li><code>$&amp;</code> 指代匹配的子字符串。</li>
<li><code>$\</code> 指代匹配结果前面的文本。</li>
<li><code>$&#39;</code> 指代匹配结果后面的文本。</li>
<li><code>$n</code> 指代匹配成功的第n组内容，n是从1开始的自然数。</li>
<li><code>$$</code> 指代美元符号$。</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>split()：按照给定规则进行字符串分割，返回一个数组，包含分割后的各个成员。</li>
</ul>
<h3 id="2-4-匹配规则"><a href="#2-4-匹配规则" class="headerlink" title="2.4 匹配规则"></a>2.4 匹配规则</h3><ul>
<li>字面量字符：字符直接表示其字面的含义，如/a/、/word/。</li>
<li>元字符：表示特殊含义<ul>
<li><code>.</code>字符<ul>
<li>能匹配除回车（\r）、换行(\n) 、行分隔符（\u2028）和段分隔符（\u2029）以外的所有字符。</li>
<li>但是只能匹配一个字符。</li>
</ul>
</li>
<li>位置字符<ul>
<li><code>^</code>字符：表示字符串的开始位置</li>
<li><code>$</code>字符：表示字符串的结束位置</li>
</ul>
</li>
<li>选择符<ul>
<li><code>|</code>字符：表示关系”或“。<strong>会包括前后的多个字符</strong><ul>
<li>重复类：用于精确设置匹配次数，使用<code>{}</code>表示。<code>{n}</code>表示重复n次，<code>{n,}</code>表示不少于n次，<code>{m,n}</code>表示重复m~n次。<strong>只匹配前一个字符</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>量词符：用于设置模式匹配的次数，同样只匹配前一个字符：<ul>
<li><code>?</code>等同于<code>{0,1}</code></li>
<li><code>*</code>等同于<code>{0,}</code></li>
<li><code>+</code>等同于<code>{1,}</code></li>
</ul>
</li>
<li>贪婪模式：匹配到下一个字符不满足匹配规则为止。<ul>
<li>所有的量词符后面加上<code>?</code>即可变为非贪婪模式。</li>
</ul>
</li>
<li>字符类：表示一系列字符中只要匹配一个就可以，所有可供选择的字符都放在方括号中。如<code>[abc]</code>：表示匹配a、b、c三个字母中的任意一个。<ul>
<li>脱字符（^）<ul>
<li><code>[^abc]</code>：表示除了abc外所有字符都可以匹配。</li>
<li><code>[^]</code>可以匹配所有字符，比<code>.</code>匹配更强。</li>
<li><code>^</code>字符只有在字符类的第一个位置才有意义，否则直接就是字面含义。</li>
</ul>
</li>
<li>连字符（-）<ul>
<li>对于连续序列的字符可用（-）来简写。</li>
<li><code>[a-z]</code>表示所有的小写字母。</li>
<li><code>-</code>字符若不在方括号之中则代表字面含义。</li>
<li>并且连字符必须在头尾两个字符之间才有特殊含义，否则只是字面含义。</li>
</ul>
</li>
</ul>
</li>
<li>转义符<ul>
<li>在正则表达式中有些特殊含义的字符，如果要匹配它们本身则需要在前面加上反斜杠。</li>
<li>正则表达式中需要斜杠转义的一共有以下12个字符：<code>^</code>、<code>.</code>、<code>[</code>、<code>$</code>、<code>(</code>、<code>)</code>、<code>|</code>、<code>*</code>、<code>+</code>、<code>?</code>、<code>{</code>和<code>\\</code>。</li>
<li>注意若是通过RegExp构造函数生成正则对象，转义时需要使用双斜杠<code>\\</code>，因为字符串内部会先转义一次。</li>
</ul>
</li>
<li>修饰符<ul>
<li><code>g</code>修饰符<ul>
<li>默认情况下，第一次匹配成功之后正则表达式就停止匹配，若有g修饰符则会匹配所有符合条件的结果，主要用于搜索和替换。</li>
</ul>
</li>
<li><code>i</code>修饰符<ul>
<li>表示忽略大小写。</li>
</ul>
</li>
<li><code>m</code>修饰符<ul>
<li>表示多行模式，会修改<code>^</code>、<code>$</code>的行为，这两个字符默认情况下是作为位置字符来匹配字符串的开始和结束位置。当加上m修饰符时会匹配行首和行尾，即会识别换行符（\n）。</li>
<li><code>/^bc/m.test(&quot;a\nbc&quot;)</code>返回true。</li>
</ul>
</li>
</ul>
</li>
<li>预定义模式：指常见模式的一些简写方式<ul>
<li><code>\d</code> 匹配0-9之间的任一数字，相当于<code>[0-9]</code>。</li>
<li><code>\D</code> 匹配所有0-9以外的字符，相当于<code>[^0-9]</code>。</li>
<li><code>\w</code> 匹配任意的字母、数字和下划线，相当于<code>[A-Za-z0-9_]</code>。</li>
<li><code>\W</code> 除所有字母、数字和下划线以外的字符，相当于<code>[^A-Za-z0-9_]</code>。</li>
<li><code>\s</code> 匹配空格（包括制表符、空格符、断行符等），相等于<code>[\t\r\n\v\f]</code>。</li>
<li><code>\S</code> 匹配非空格的字符，相当于<code>[^\t\r\n\v\f]</code>。</li>
<li><code>\b</code> 匹配词的边界，即该词单独存在。</li>
<li><code>\B</code> 匹配非词边界，即在词的内部。</li>
</ul>
</li>
<li><p>特殊字符：正则表达式中表示一些不能打印的字符。</p>
<blockquote>
<p>\cX 表示Ctrl-[X]，其中的X是A-Z之中任一个英文字母，用来匹配控制字符。<br>  [\b] 匹配退格键(U+0008)，不要与\b混淆。<br>  \n 匹配换行键。<br>  \r 匹配回车键。<br>  \t 匹配制表符tab（U+0009）。<br>  \v 匹配垂直制表符（U+000B）。<br>  \f 匹配换页符（U+000C）。<br>  \0 匹配null字符（U+0000）。<br>  \xhh 匹配一个以两位十六进制数表示的字符。<br>  \uhhhh 匹配一个以四位十六进制数表示的unicode字符。</p>
</blockquote>
</li>
<li><p>组匹配</p>
<ul>
<li>正则表达式中通过括号表示分组匹配。</li>
<li>使用组匹配时不宜同时使用g修饰符，否则match方法不会捕获分组内容。如：<code>&quot;abcabc&quot;.match(/(.)b(.)/);//返回[&#39;abc&#39;, &#39;a&#39;, &#39;c&#39;]</code>而<code>&quot;abcabc&quot;.march(/(.)b(.)/g)返回[&#39;abc&#39;, &#39;abc&#39;]</code>。</li>
<li>组匹配中通过<code>\数字</code>可以引用括号匹配的内容。如：<code>/(.)b(.)\1\2/.test(&#39;abcabc&#39;) // \1表示第一个括号匹配结果即a， \2表示第二个括号匹配结果即c</code>。</li>
</ul>
</li>
<li>非捕获组<ul>
<li><code>(?:x)</code>表示不返回该组匹配的内容，为了不占用组匹配。</li>
<li>如：<code>&quot;abc&quot;.match(/(?:.)b(.)/)</code>返回[“abc”, “c”]。</li>
</ul>
</li>
<li>先行断言<ul>
<li><code>x(?=y)</code>表示x只有在y的前面才匹配，并且匹配结果中不会将y计入。</li>
<li>如：<code>&quot;abc&quot;.match(/b(?=c)/);</code>返回[“b”]。</li>
</ul>
</li>
<li>先行否定断言<ul>
<li>x只有不在y前面才会匹配。</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript学习笔记]]></title>
      <url>http://arlendp.me/web/js/js-study-notes/</url>
      <content type="html"><![CDATA[<p>本文是对《javascript权威指南》这本书中的知识点的总结。<br><a id="more"></a></p>
<h2 id="1-词法结构"><a href="#1-词法结构" class="headerlink" title="1. 词法结构"></a>1. 词法结构</h2><ul>
<li>js标识符必须以字母、下划线（<code>_</code>）或美元符（<code>$</code>）开始，后续字符可以是字母、数字、下划线或美元符。</li>
<li>当缺少分号时，js并不是在所有换行处填补分号，而是在缺少分号就无法正确解析代码的时候才会填补分号。但有两个例外：<ul>
<li>当<code>return</code>、<code>break</code>和<code>continue</code>语句后面紧接着换行时，js会在换行处添加分号。</li>
<li>当涉及到<code>++</code>和<code>--</code>符号时，若运算符作为后缀使用，应和表达式在同一行，若此时换行，js会在行尾填补分号，运算符会作为下一行代码的前缀运算符。</li>
</ul>
</li>
</ul>
<h2 id="2-类型、值和变量"><a href="#2-类型、值和变量" class="headerlink" title="2. 类型、值和变量"></a>2. 类型、值和变量</h2><ul>
<li>对象、数组属于可变类型，数字、字符串、布尔值、<code>null</code>和<code>undefined</code>属于不可变类型。</li>
<li>任意js的值都可以转换为布尔值。<code>undefined</code>、<code>null</code>、<code>0</code>、<code>-0</code>、<code>NaN</code>、<code>&quot;&quot;</code>会转化成<code>false</code>，其他值都会转换成<code>true</code>。</li>
<li><code>null</code>是一种特殊的对象。<code>undefined</code>属于<code>undefined</code>类型，变量没有初始化，当查询的对象或数组的属性或元素不存在，如果函数没有返回任何值，引用没有提供实参的函数形参的值都会返回<code>undefined</code>。<code>undefined</code>是预定义的全局变量，不是关键字。<code>==</code>会认为两者相等，<code>.</code>和<code>[]</code>对两者进行操作时都会产生类型错误。若想将他们赋值给变量、属性或作为参数传入函数建议使用<code>null</code>。</li>
<li>不在任何函数内的js代码可以使用关键字<code>this</code>来引用全局对象。</li>
<li>在读取字符串、数字和布尔值的属性值时，表现的像对象一样。但如果你给其属性赋值，则会忽略这个操作：修改只是发生在临时对象身上，而这个临时对象并未被保留下来。</li>
<li>对象的比较并非值的比较：即使两个对象包含同样的属性及相同的值，他们也是不相等的。</li>
<li><code>x + &quot;&quot;</code>等价于<code>String(x)</code>，<code>+x</code>等价于<code>Number(x)</code>，<code>!!x</code>等价于<code>Boolean(x)</code>。</li>
<li><code>+</code>、<code>==</code>、<code>!=</code>和关系运算符是唯一执行特殊字符串到原始值的转换方式的运算符。</li>
<li>使用<code>var</code>语句重复声明变量是合法无害的。若给未声明的变量赋值，js会给全局对象创建一个同名属性。</li>
<li>函数体内，局部变量的优先级高于同名的全局变量。</li>
<li>js使用了函数作用域，即在函数内声明的所有变量在函数体内始终是可见的。声明提前：js函数内声明的所有变量都（不包含赋值）被提前至函数体的顶部。</li>
<li>词法作用域：通过阅读包含变量定义在内的数行源码就能知道变量的作用域。</li>
</ul>
<h2 id="3-表达式和运算符"><a href="#3-表达式和运算符" class="headerlink" title="3. 表达式和运算符"></a>3. 表达式和运算符</h2><ul>
<li>如果表达式后跟一对方括号，则会计算方括号内的表达式的值并将它转换为字符串。只有当属性名称是合法的标识符并且需要知道要访问的属性名时，才能使用<code>.</code>来访问属性。</li>
<li>如果函数使用<code>return</code>给出一个返回值时，这个返回值就是该表达式的值，否则表达式的值就是<code>undefined</code>。</li>
<li>如果对象创建表达式不需要传入任何参数给构造函数的话，那么空圆括号是可以省略的。</li>
<li>构造函数一般不会返回一个值，并且这个新创建并被初始化后的对象就是整个对象创建表达式的值。如果该构造函数返回了一个对象值（只能是对象），那么该对象则作为整个表达式的值，而构造函数中新创建的对象就废弃了。</li>
<li><p>js中子表达式的计算过程中的运算顺序不同于运算符的优先级和结合性规定的运算顺序。js总是严格按照从左至右的顺序来计算表达式的。如计算式</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">var b = (a++) + a;</div></pre></td></tr></table></figure>
<ol>
<li>计算b</li>
<li>计算a++（结果记为c），之后a的值增1</li>
<li>计算a</li>
<li>计算c+a（此时a为2）</li>
<li>将结果赋值给b</li>
</ol>
</li>
<li><p>所有无法转换为数字的操作数都转化为<code>NaN</code>，若有操作数为<code>NaN</code>，此时计算结果也为<code>NaN</code>。</p>
</li>
<li>求余运算中余数的符号和被除数的符号保持一致。</li>
<li><p>当<code>+</code>与字符串和数字一起使用时，应考虑加法的结合性对运算的影响。</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var a = 1 + 2 + &quot;hello&quot;;//&quot;3hello&quot;</div><div class="line">var b = 1 + (2 + &quot;hello&quot;);//&quot;12hello&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>位运算符的操作数为整数，且为32位整型，若不是则会强制转换。</p>
<ul>
<li>左移（&lt;&lt;）新的一位会用0来补充</li>
<li>右移（&gt;&gt;）新的一位由操作数的符号决定，正数补0，负数补1。</li>
<li>无符号右移（&gt;&gt;&gt;）新的一位总是补0.</li>
</ul>
</li>
<li>只有数字和字符串才能真正执行比较操作，除此之外的都将进行类型转换。如果一个操作数是（或转换之后是）<code>NaN</code>，则比较结果总为<code>false</code>。字符串比较中大写字母总是小于小写字母。</li>
<li>in运算符：如果右侧的对象有一个名为左侧操作数的属性名，那么表达式返回<code>true</code>。</li>
<li>instanceof运算符：左操作数是对象，右操作数是对象的类。若左操作数不是对象，则返回<code>false</code>，若右操作数不是函数，则抛出类型错误异常。</li>
<li><p><code>&amp;&amp;</code> 和 <code>||</code>的“短路”性质，可用于简写代码：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (a == b) &#123;</div><div class="line">    stop();</div><div class="line">&#125;</div><div class="line"></div><div class="line">(a == b) &amp;&amp; stop();</div></pre></td></tr></table></figure>
</li>
<li><p>带操作符的赋值运算中需要注意：表达式<code>a op= b</code>和<code>a = a op b</code>的不同点，当a中含有具有副作用的表达式时，两者是不同的。如：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = [<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="comment">//data[i++] *= 2;</span></div><div class="line"><span class="comment">//data[i++] = data[i++] * 2;</span></div><div class="line">两者计算结果不同，第一个data = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]，第二个data = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
</li>
<li><p><code>typeof</code>运算符返回表示操作数类型的字符串，可将数组和对象与函数区分开。</p>
</li>
<li><code>delete</code>运算符用来删除对象属性或数组元素，删除属性时该属性在对象中不再存在，删除数组元素时，其对应值变为<code>undefined</code>。但通过<code>var</code>声明的变量和定义的函数都不能被删除。</li>
<li><code>void</code>运算符：操作数会照常计算但是忽略计算结果并返回<code>undefined</code>。常用于url中。</li>
</ul>
<h2 id="4-语句"><a href="#4-语句" class="headerlink" title="4. 语句"></a>4. 语句</h2><ul>
<li>全局变量是全局对象的属性，然而和其他全局变量的属性不同的是，var声明的变量是无法通过delete删除的。</li>
<li>函数声明语句和函数定义表达式的不同点：<ul>
<li>函数定义语句中的函数名称和函数体均被显式的提前到脚本或函数的顶部，因此他们在整个脚本和函数内都是可见的。</li>
<li>使用var声明的函数表达式中只有变量声明被提前了，变量的初始化代码仍在原来的位置。</li>
</ul>
</li>
<li><code>default</code>标签可以放在<code>switch</code>语句的任何位置，并不会影响结果。</li>
<li><code>while(true)</code>和<code>for(;;)</code>都表示死循环。</li>
</ul>
<h2 id="5-对象"><a href="#5-对象" class="headerlink" title="5. 对象"></a>5. 对象</h2><ul>
<li>如果变量x是指向一个对象的引用，那么执行代码`var y = x;变量y也是指向同一个对象的引用，而非这个对象的副本。通过变量y修改这个对象同样会对变量x的值造成影响。</li>
<li>对象的属性名可以是包含空字符串在内的任意字符串，但对象中不能存在两个同名的属性。同时属性名也可以是标识符，但若属性名含有非法字符或是关键字则需要带上引号。</li>
<li>用<code>.</code>操作对象时，右侧必须是一个以属性名命名的标识符。用<code>[]</code>操作对象时，方括号内的表达式必须返回一个字符串或者可以转换为字符串的值。</li>
<li>若要查询对象o的属性x，如果o中不存在x，那么将会继续在o的原型对象中查询属性x，如果原型对象中也没有x，但这个原型对象也有原型，那么继续在这个原型对象的原型上执行查询，直到找到x或者找到一个原型是null的对象为止。</li>
<li>若给对象o的属性x赋值，如果o中已经有了属性x，那么这个赋值操作只改变这个已有属性x的值；如果o中不存在属性x，那么赋值操作给o添加了新属性x；如果之前o继承了属性x，那么这个继承的属性就被新创建的同名属性覆盖了。</li>
<li><code>delete</code>只是断开属性和宿主对象的联系，只能删除自有属性而不能删除继承属性，若一定要删除则只能从定义这个属性的原型对象上删除。（但这会影响到所有继承自这个原型的对象）</li>
<li><code>in</code>运算符可检测是否含有自有属性和继承属性，<code>hasOwnProperty</code>只能检测是否含有自由属性。</li>
<li>可通过<code>o.x !== undefined</code>判断是否含有某种属性，效果等同于in运算符。（但此种方法不能区分存在但值为undefined的属性）</li>
<li>for/in循环可以遍历对象中所有可枚举的自有属性和继承属性，但不能枚举继承的内置方法。</li>
<li><code>Object.keys()</code>返回可枚举的自有属性，<code>Object.getOwnPropertyNames()</code>返回所有自有属性。</li>
<li>存取器属性<code>getter</code>和<code>setter</code>。</li>
<li><code>Object.getOwnPropertyDescriptor(Object, attributeName)</code>获得某个对象特定自有属性的属性描述符。</li>
<li><code>Object.defineProperty(Object, attributeName, descriptorObject)</code>可以设置属性的特性。</li>
<li>通过对象直接量创建的对象使用<code>Object.prototype</code>作为它的原型，通过new创建的对象使用构造函数的prototype属性作为它的原型，通过<code>Object.create()</code>创建的对象使用第一个参数作为它的原型。</li>
<li><code>Object.getPrototypeOf()</code>可以查询对象的原型。</li>
<li><code>ObjectA.isPrototypeOf(ObjectB)</code>检测对象A是否是对象B的原型。</li>
<li>对象的可扩展性表示是否可以给对象添加新属性。<code>Object.isExtensible()</code>判断对象是否可扩展；<code>ObjectPreventExtensions()</code>将对象转换为不可扩展的，此时再无法将对象转换回可扩展的了，同时这样做只能影响到对象本身的可扩展性，若给一个不可扩展的对象的原型添加属性，则该对象同样会继承这个新属性。</li>
</ul>
<h2 id="6-数组"><a href="#6-数组" class="headerlink" title="6. 数组"></a>6. 数组</h2><ul>
<li>js数组可以是稀疏的，数组元素的索引不一定要连续，他们之间可以有空缺，对于每一个数组都有<code>length</code>属性，针对非稀疏数组，该属性就是数组元素的个数，而对于稀疏数组，该属性值比所有元素的索引都要大。</li>
<li>数组直接量的语法允许有可选的结尾的逗号，因此<code>var a = [, ,]</code>含有两个<code>undefined</code>值而非三个。</li>
<li>数组的索引是<strong>0~2^32-2</strong>之间的整数。</li>
<li>因为数组是对象，因此可以为其创建任意名字的属性，但是如果属性名是数组的索引，数组就会更新它的length属性值。</li>
<li>可以使用负数或者非整数作为数组的索引，此时数值将转换为字符串来作为属性名使用，此时只能作为属性名而非数组索引。同样，如果使用了非负整数的字符串作为数组索引，它就会直接作为数组索引而非对象的属性值。当使用浮点数作为索引时，若浮点数与一个整数相等则同样方式处理。</li>
<li>关于<code>length</code>属性：<ul>
<li>如果为一个数组元素赋值，它的索引 <strong>i</strong> 大于或等于现有数组的长度时，length的属性值将设置为 <strong>i+1</strong></li>
<li>若设置length属性为一个小于当前长度的非负整数n时，当前数组中那些索引值大于或等于n的元素将从中删除。</li>
</ul>
</li>
</ul>
<h2 id="7-函数"><a href="#7-函数" class="headerlink" title="7. 函数"></a>7. 函数</h2><ul>
<li>函数的定义可以通过函数声明或者函数定义表达式。通过函数声明的方法定义的函数，其名称是必需的部分，函数声明实际上声明了一个变量并把一个函数赋值给它。通过函数定义表达式的方式定义的函数，其名称是可选的，如果它包含名称，函数的局部作用域将会包含一个绑定到该函数对象的名称，函数的名称将成为函数内部的一个局部变量，在比如函数需要递归的情况下是很有用的。</li>
<li>函数声明语句被提前到外部脚本或外部函数作用域的顶部，所以这种方式声明的函数可以被在它定义之前出现的代码所调用。要调用以表达式定义的函数则需要将函数赋值给一个变量，变量的声明会提前但是变量的赋值是不会提前的。</li>
<li>函数声明语句不能出现在循环、条件判断、或者try/catch/finally以及with语句中。函数定义表达式则不受限制。</li>
<li>普通的函数调用中（无论该函数声明是在脚本中还是函数内）的上下文<code>this</code>指的是全局对象（严格模式中是undefined），而方法调用中则指的是调用该方法的对象。</li>
<li>构造函数调用创建一个新的空对象，这个对象继承自构造函数的prototype属性，构造函数会试图初始化这个新创建的对象，并将这个对象用作其调用上下文，因此构造函数中的this指的是这个新创建的对象。</li>
<li>构造函数通常不使用<code>return</code>返回值，因为构造函数会显式返回初始化的新对象，如果使用了return返回一个对象，则调用构造函数返回的就是这个对象，若return返回的是其他值则会忽略该返回值。</li>
<li>在函数体内标识符<code>arguments</code>是指向实参对象的引用，实参对象是一个类数组对象，可以通过数字下标来访问传入函数的实参值。</li>
<li><code>arguments</code>和形参指的是同一个值，修改任意一个值都会影响到另一个。</li>
<li>函数不仅是一种语法也是值。</li>
<li>闭包的实现和理解，词法作用域。</li>
<li><p><code>call()</code>方法和<code>apply()</code>方法可以看作是某个对象的方法，通过调用方法的形式来间接调用函数。对于call函数来说，第一个调用上下文参数之后的所有参数都是要传入的待调用函数的实参；而apply方法则将实参都放入一个数组当中。两种方法的第一个参数都是一个要调用该函数的对象，该函数中的<code>this</code>则指向这个对象。如：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">y</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + y;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = &#123;x: <span class="number">1</span>&#125;;</div><div class="line">add.call(a, <span class="number">2</span>)<span class="comment">//返回3</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>bind()</code>方法将函数绑定至某个对象，并返回一个新的函数。如：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function f(y) &#123;</div><div class="line">    return this.x + y;</div><div class="line">&#125;</div><div class="line">var a = &#123;x: 1&#125;;</div><div class="line">var g = f.bind(a);</div><div class="line">g(2)//返回3</div><div class="line">上述过程相当于</div><div class="line">a = &#123;x: 1, f: function(y) &#123;return this.x + y&#125;&#125;;</div><div class="line">g = a.f;</div></pre></td></tr></table></figure>
</li>
<li><p>通过<code>Function()</code>构造的函数不使用词法作用域，它的作用域是全局作用域。</p>
</li>
<li>js在函数式编程中的使用。</li>
</ul>
<h2 id="8-类和模块"><a href="#8-类和模块" class="headerlink" title="8. 类和模块"></a>8. 类和模块</h2><ul>
<li>定义构造函数即是定义类，因此构造函数名的首字母要大写，而普通的函数和方法名首字母都是小写。</li>
<li>构造函数不必用<code>return</code>返回值，当通过<code>new</code>关键字来创建新对象时会自动返回该对象。其原型对象的名字为<code>ClassName.prototype</code>，这是一个强制命名，通过该构造函数创建的新对象会自动使用该原型对象作为新创建的对象的原型。</li>
<li><strong>原型对象是类的唯一标识</strong>，当且仅当两个对象继承自同一个原型对象时，它们才是属于同一个类的实例，而初始化该对象的构造函数则不能作为类的标识，两个构造函数的prototype可能指向同一个原型对象，那么这两个构造函数创建的实例是属于同一个类的。</li>
<li><code>a instanceof A</code>并不会检查a是否是由A()构造函数初始化而来，而是检查a是否继承自A.prototype。</li>
<li>在希望用到字符串的地方用到对象的话，js会自动调用<code>toString</code>方法，如果没有实现这个方法，类会默认从<code>Object.prototype</code>中继承这个方法。</li>
<li>代码的模块化很重要，模块是一个独立的js文件，模块文件可以包含一个类定义、一组相关的类、一个实用函数库或者是一些待执行的代码。</li>
<li>所有模块都尽量定义不超过一个全局变量。</li>
<li>创建模块的过程中，避免污染全局变量的一种方法是使用一个对象作为命名空间。</li>
</ul>
<h2 id="9-正则表达式的模式匹配"><a href="#9-正则表达式的模式匹配" class="headerlink" title="9. 正则表达式的模式匹配"></a>9. 正则表达式的模式匹配</h2><p>正则表达式部分在我的另一篇博客中有介绍到：<a href="">javascri正则表达式</a></p>
<h2 id="10-web浏览器中的javascript"><a href="#10-web浏览器中的javascript" class="headerlink" title="10. web浏览器中的javascript"></a>10. web浏览器中的javascript</h2><ul>
<li><p>在html文档里嵌入客户端javascript代码有四种方法：</p>
<ul>
<li>内联方式，放置在<code>&lt;script&gt;&lt;/script&gt;</code>标签对之间。</li>
<li>放置在<code>&lt;script&gt;</code>标签的src属性指定的外部文件中。</li>
<li>放置在html事件处理程序中，如放入onclick的属性值中。</li>
<li>放在url中，该url使用特殊的”javascript:”协议。</li>
</ul>
</li>
<li><p>当使用<code>src</code>属性时，<code>&lt;script&gt;&lt;/script&gt;</code>之间的任何内容都会忽略。</p>
</li>
<li><code>script</code>标记中type属性默认值为”text/javascript”，如果没有指定，则使用默认值。若指定的类型是一个不可执行的类型，则不会从该url中下载任何东西。</li>
<li>可以通过<code>&lt;a href=&quot;javascript: void doSomethingHere;&quot;&gt;</code>来执行某些操作并且不会修改当前页面文档。</li>
<li>脚本和事件处理程序在同一时间只能执行一个，没有并发性。</li>
<li>javascript的时间线。</li>
</ul>
<h2 id="11-Window对象"><a href="#11-Window对象" class="headerlink" title="11. Window对象"></a>11. Window对象</h2><ul>
<li>它是客户端js的全局对象。</li>
<li><code>Location</code>对象的<code>assign()</code>和<code>replace()</code>方法都可以使窗口载入一个指定的url中的文档，后者在载入新文档之前会将当前文档从浏览历史中删除，此时后退操作无效。</li>
<li><code>Location</code>对象的<code>reload()</code>方法可以让浏览器重新载入当前文档。</li>
<li>直接将url赋值给<code>location</code>属性。</li>
<li>片段标识符不会使浏览器载入新的文档，它只会使它滚动到文档中的某个位置。<code>#id</code>会使浏览器跳到元素id对应的位置。<code>#top</code>如果没有元素id为top的话，则浏览器会跳到文档的开始处。</li>
<li><code>history</code>属性包含浏览器的浏览历史信息。</li>
<li><code>navigator</code>属性包含浏览器厂商和版本信息。</li>
<li><code>screen</code>属性包含窗口大小和可用颜色信息。</li>
<li>浏览器会为了防止广告的弹出而禁用<code>window.open()</code>方法，只有当用户手动点击按钮或者链接的时候才会调用。</li>
<li>如果正在事件处理程序中调用<code>close()</code>方法，则应指明是Window对象还是Document对象的close方法。</li>
<li>即使一个窗口已经关闭，但是代表它的Window对象仍然存在，它的document会使null，它的方法也不会工作。</li>
<li>Window对象的open()方法会返回新创建的窗口的Window对象，而该对象的opener属性则指向打开该窗口的原始窗口的Window对象。</li>
<li>窗体是用<code>&lt;iframe&gt;</code>元素创建的，窗体或窗口之间可以互相嵌套，可通过<code>parent</code>引用父窗口或窗体的window对象，<code>top</code>则可直接引用顶级窗口对象。若获取了iframe元素，可通过<code>contentWindow</code>属性获取该窗体的window对象，相反可通过window对象的<code>frameElement</code>得到对应的元素。另外，Window对象中还有frames属性可以得到自身包含的子窗口或窗体的引用，frames属性引用的是类数组对象，数组中的元素是Window对象而不是iframe元素，当访问子窗体时也可通过iframe元素的name或id属性来访问。</li>
</ul>
<h2 id="12-脚本化文档"><a href="#12-脚本化文档" class="headerlink" title="12. 脚本化文档"></a>12. 脚本化文档</h2><ul>
<li><code>Document</code>对象表示窗口的内容。</li>
<li>在html的树形结构中，树形的根部是<code>Document</code>节点，代表整个文档，代表html元素的是<code>Element</code>节点，代表文本的是<code>Text</code>节点。这三种节点都是Node的子类。</li>
<li>html的<code>name</code>属性最初是为了表单元素分配名字，在表单数据提交到服务器时使用该属性的值。name属性的值在html文档中不必唯一，并且该属性仅在表单、表单元素、iframe和img这些元素中有效。（<strong>对于IE浏览器，通过<code>getElementById()</code>和<code>getElementsByName()</code>均会返回包含对应id和name的元素，因此不应将同样的字符串用作id和name的值</strong>）</li>
<li><code>document.documentElement</code>指代文档的根元素，<code>document.head</code>和<code>document.body</code>分别指代head和body元素。</li>
<li><code>NodeList</code>和<code>HTMLCollection</code>都是类数组对象，因此不能直接使用Array的方法，但可以通过call和apply来间接调用。</li>
<li><code>querySelectorAll()</code>方法是通过css选择器的方式来匹配元素，但是其返回值并不是实时的，不会随着文档的变化而更新。<code>querySelector()</code>则是返回匹配的第一个元素。</li>
<li>html中的属性名不区分大小写，但是js中的属性名则大小写敏感。因此html中的属性名在js中全部转换为小写，如果属性名包含不只一个单词，则除第一个单词外其余单词的首字母均大写。另外，有些html属性名在js中是保留字，对于这些属性一般是在属性名前加<strong>html</strong>前缀，例如，<code>for</code>转换为<code>htmlFor</code>，但对于<code>class</code>属性则例外，它转换为<code>className</code>。</li>
<li>表示html属性的值通常是字符串，但当html属性为布尔值或数字时，js中的属性也是布尔值或者数字。</li>
<li>HTML5提供任意以<code>data-</code>为前缀的小写的属性名而在元素上绑定一些额外的信息。同时定义了Element对象的dataset属性，该对象的属性对应于上述含前缀的属性。</li>
<li><code>createElement()</code>和<code>createTextNode()</code>分别用于创建Element节点和Text节点。</li>
<li>如果通过<code>appendChild()</code>和<code>insertBefore()</code>方法将文档中已经存在的节点插入到文档中，那个节点将会从它当前的位置删除并在新的位置重新插入。</li>
<li><code>window.pageXOffset</code>、<code>window.pageYOffset</code>、<code>document.documentElement.scrollTop</code>、<code>document.documentElement.scrollLeft</code>都可以得到滚动条的位置信息。</li>
<li><code>window.innerWidth</code>、<code>window.innerHeight</code>、<code>document.documentElement.clientWidth</code>、<code>document.documentElement.clientHeight</code>都可以得到视口的尺寸信息。</li>
<li><code>getBoundingClientRect()</code>、<code>getClientRects()</code>可以得到一个元素的尺寸和位置。</li>
</ul>
<h2 id="13-脚本化css"><a href="#13-脚本化css" class="headerlink" title="13. 脚本化css"></a>13. 脚本化css</h2><ul>
<li>style属性中的样式覆盖了样式表中的样式，而且文档的样式表中的样式覆盖了浏览器的默认样式。</li>
<li>对于<code>absolute</code>和<code>fixed</code>定位，可以通过left和right或top和bottom来设置长和宽，若通过含有width或height，则相应的right和bottom将失效。</li>
<li><code>z-index</code>属性只对兄弟元素应用堆叠效果。</li>
<li><code>z-index</code>属性不适用于非定位元素，但对于非定位元素，它的值为0。</li>
<li>对于定位元素，left和top属性指定了从容器边框内侧到定位元素边框外侧的距离。</li>
<li>如果css属性名包含多个连字符，在js中应将连字符移除并将每个连字符后紧接着的字母大写。如果css属性名在js中属于保留字，则应在该属性名前加上”css”前缀，如”cssFloat”。</li>
<li>通过js操作元素的style属性时，所有的值都是字符串，并且对于定位属性，其单位也要写上。</li>
</ul>
<h2 id="14-事件处理"><a href="#14-事件处理" class="headerlink" title="14. 事件处理"></a>14. 事件处理</h2><ul>
<li><code>event</code>对象被当作参数传给事件处理函数，该对象的<code>type</code>属性确定了事件的类型，<code>target</code>属性确定了触发事件的对象。</li>
<li>当按下键盘按键重复产生字符时，在<code>keyup</code>事件之前会产生多个<code>keypress</code>事件，该事件对象指定的是产生的字符，而不是按键。</li>
<li><code>addEventListener()</code>能为同一个对象注册同一事件类型的多个处理程序函数，当对象上发生事件时，所有该事件类型的注册处理程序都会按照注册的顺序调用。</li>
<li>使用相同的参数在同一对象上多次调用<code>addEventListener()</code>是没用的，处理程序仍然只注册一次，同时重复调用也不会改变调用处理程序的顺序。</li>
<li>对于IE9之前不支持<code>addEventListener()</code>、<code>removeEventListener()</code>但支持类似的方法，<code>attachEvent()</code>和<code>detachEvent()</code>。两种方法类似但是存在以下几点不同：<ul>
<li>只有两个参数</li>
<li>第一个参数使用了带”on”前缀的事件处理程序名字字符串。</li>
<li>当给同一对象注册多个同一事件处理程序，事件发生时，会多次触发事件处理程序。</li>
<li>通过这种方式注册的事件处理程序中的this指的是全局对象，而其他方式指的是目标对象。</li>
</ul>
</li>
<li>事件的调用顺序：<ul>
<li>通过设置对象属性或html属性注册的处理程序优先调用。</li>
<li>通过<code>addEventListener()</code>注册的处理程序按照它们的注册顺序调用。</li>
<li>使用<code>attachEvent()</code>注册的处理程序可能按照任何顺序调用，代码不应依赖于调用顺序。</li>
</ul>
</li>
</ul>
<h2 id="15-脚本化http"><a href="#15-脚本化http" class="headerlink" title="15. 脚本化http"></a>15. 脚本化http</h2><ul>
<li>http请求的顺序是：先是请求方法和url，然后是请求头，最后是请求主体。</li>
</ul>
<h2 id="16-jquery类库"><a href="#16-jquery类库" class="headerlink" title="16. jquery类库"></a>16. jquery类库</h2><ul>
<li>this指的是原生文档参数，而不是jquery对象，若想使用jquery方法，则应该写成<code>$(this)</code>。</li>
<li>jquery中使用同一个方法既当setter又当getter使用，用作setter时，这些方法会给jquery对象中的每一个元素设置值，当作为getter使用时，这些方法只会查询jquery对象中的第一个元素并给它设置值。</li>
<li><code>css()</code>方法返回的是当前样式，即计算样式，该返回值既可能来自style属性也可能来自样式表。</li>
<li><code>css()</code>方法不能获取复合样式，但是可以设置复合样式的值，其中的样式名既可以用连字符也可以用驼峰格式。</li>
<li><code>css()</code>方法在获取样式值时，会把数值转换成带有单位后缀的字符串返回，在设置样式值时，则会将数值转换成字符串并在必要时添加”px”后缀。</li>
<li><code>offset()</code>方法返回元素的绝对位置，用相对于文档的坐标来表示。<code>position()</code>方法返回相对于元素的<code>offsetParent()</code>的偏移量。</li>
<li>获取元素的尺寸可以使用以下几种方法:<ul>
<li><code>width()</code>、<code>height()</code>返回内容的宽度和高度。</li>
<li><code>innerWidth()</code>、<code>innerHeight()</code>返回包含内边距的宽度和高度。</li>
<li><code>outerWidth()</code>、<code>outerHeight()</code>返回包含边框的宽度和高度</li>
<li>若对第三种方法传入参数<code>true</code>则返回的是包含元素外边距的宽度和高度。</li>
</ul>
</li>
<li>如果插入的元素已经是文档的一部分，这些元素只会简单的移动而不是复制到新位置。</li>
<li>jquery动画只支持数值属性。</li>
</ul>
<h2 id="17-客户端存储"><a href="#17-客户端存储" class="headerlink" title="17. 客户端存储"></a>17. 客户端存储</h2><ul>
<li>浏览器目前只支持存储字符串类型数据，若要存取其他类型的数据，需要手动进行编码和解码。</li>
</ul>
<h2 id="18-多媒体和图形编程"><a href="#18-多媒体和图形编程" class="headerlink" title="18. 多媒体和图形编程"></a>18. 多媒体和图形编程</h2><ul>
<li>通过<code>Image()</code>构造函数来创建一个图片对象，并将其<code>src</code>属性设置为相应的图片的url，这样由于图片元素并没有被添加到文档中，因此它是不可见的，但是浏览器会加载图片并将其缓存起来。当其他部分需要使用到该图片时便可直接从浏览器缓存中获取。</li>
<li>对于音频元素，可通过<code>new Audio(&quot;url&quot;)</code>来构造一个对象，但视频元素没有类似的构造函数。</li>
<li>在用<code>canvas</code>绘制图形时，当完成一条路径要绘制另一条路径前应使用<code>beginPath()</code>方法，如果没有使用该方法，那么添加的所有子路径都是处于当前路径上，使用<code>stroke()</code>和<code>fill()</code>方法时会作用在当前路径上的所有子路径。可能会导致重复绘制。</li>
<li>非零绕数原则：判断一个点是否在路径的内部。</li>
<li>每个<code>canvas</code>元素只有一个上下文对象，就算多次调用<code>getContext()</code>方法也会返回相同的上下文对象。</li>
<li>线段宽度是由<code>lineWidth</code>属性和当前坐标系变换决定的，与其他创建路径的方法无关。</li>
<li>文本对齐<code>textAlign</code>属性中，属性值<code>start</code>和<code>end</code>跟文本的方向有关，若文本是从左到右的则<code>start</code>和<code>left</code>是相同的，否则则相反。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git知识总结]]></title>
      <url>http://arlendp.me/git/git-knowledge/</url>
      <content type="html"><![CDATA[<p>git是平常软件开发中经常使用的版本控制系统，本文对git的原理、基础和配置方式进行了介绍，同时总结了平时使用过程中常见的git操作。<br><a id="more"></a></p>
<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><ol>
<li>集中式版本控制系统：有一个单一的集中管理的服务器，开发人员都可以连接到这台服务器，进行协同工作。</li>
</ol>
<ul>
<li>优点是系统容易管理和维护</li>
<li>缺点是如果中央服务器出现故障，工作将不能进行</li>
</ul>
<ol>
<li>分布式版本控制系统：不是只提取最新版本的文件快照，而是将整个代码仓库拷贝到本地，即使服务器故障也能通过本地仓库进行完整的恢复。</li>
</ol>
<h2 id="2-基础"><a href="#2-基础" class="headerlink" title="2. 基础"></a>2. 基础</h2><ul>
<li><p>git保存数据是保存整个文件系统的一个快照<img src="https://git-scm.com/book/en/v2/book/01-introduction/images/snapshots.png" alt="git-snapshot"></p>
</li>
<li><p>其他大部分系统保存的是文件的变更信息<img src="https://git-scm.com/book/en/v2/book/01-introduction/images/deltas.png" alt="delta"></p>
</li>
<li><p>git大部分操作都是在本地完成的，因此速度很快。即使没有网络，也可以提交文件，之后再上传</p>
</li>
<li><p>git通过SHA-1（哈希）计算校验和，由40个十六进制数组成的字符串。git数据库中保存的信息都是通过文件内容的hash值进行索引的而不是文件名。</p>
</li>
<li><p>git的三个工作区域</p>
<ul>
<li>git仓库：用来保存项目的数据以及数据库，当从其他地方clone项目时，拷贝的就是这里面的数据。</li>
<li>工作目录：存放的是项目某个版本的内容，存放于磁盘可供修改等操作，来源于git仓库中的压缩数据库。</li>
<li>暂存区域： 是一个文件，保存了将提交的文件信息。</li>
</ul>
</li>
<li><p>git工作流程</p>
<ul>
<li>在工作目录中修改文件(modified)</li>
<li>将修改的文件暂存在暂存区域(staged)</li>
<li>提交更新，将暂存区的文件存储到git仓库中(commited)</li>
</ul>
</li>
</ul>
<h2 id="3-git配置"><a href="#3-git配置" class="headerlink" title="3. git配置"></a>3. git配置</h2><p>git config</p>
<ul>
<li>–system：系统上所有用户及仓库的通用配置</li>
<li>–global：针对当前用户的配置</li>
<li>–config：针对当前仓库的配置</li>
</ul>
<p>上述配置具有优先级，由上往下递增，高优先级的覆盖低优先级的配置。</p>
<p>第一次使用时会配置个人信息<br><code>$ git config --global user.name yourname</code><br><code>$ git config --global user.email your@email.com</code><br>这些信息会写入每一次提交中，该配置只需配置一次。若想对某个项目使用特定的用户信息，通过git config来配置。<br>可通过git config –list查看所有配置信息，也可通过如git config user.name来查看用户名</p>
<h2 id="4-git基础操作"><a href="#4-git基础操作" class="headerlink" title="4. git基础操作"></a>4. git基础操作</h2><h3 id="4-1-创建git仓库"><a href="#4-1-创建git仓库" class="headerlink" title="4.1 创建git仓库"></a>4.1 创建git仓库</h3><ul>
<li>在已有项目中创建git仓库：通过<code>$ git init</code>命令创建一个.git子目录，里面存储了git仓库初始化时的必须文件，但不包括项目文件。</li>
<li>克隆仓库：通过<code>$ git clone theUrlYouWantToClone</code>，会克隆该仓库的所有版本的文件而不是最新版本的文件。执行该操作后会在当前目录下创建一个与该仓库同名的目录，并在该目录下初始化一个<code>.git</code>文件夹，将远程仓库中的数据拉取到该文件夹，并从中读取最新版本的项目文件，拷贝至其同级目录。<ul>
<li>可通过<code>$ git clone theUrlYouWantToClone myProjectName</code>修改仓库名称</li>
</ul>
</li>
</ul>
<p><strong><code>theUrlYouWantToClone</code></strong>可支持多种协议，git中常用到的是https、git和SSH协议。</p>
<h3 id="4-2-文件状态"><a href="#4-2-文件状态" class="headerlink" title="4.2 文件状态"></a>4.2 文件状态</h3><p>文件具有两种状态<strong>已跟踪</strong>和<strong>未跟踪</strong>。</p>
<ul>
<li>已跟踪的文件指的是已被纳入版本控制的文件，它们可能处于<em>未修改</em>、<em>已修改</em>、<em>已暂存</em>等状态。</li>
<li>将文件从git中移除、新建立一个文件等操作产生的文件都会处于未跟踪状态。<br>git版本控制下文件的生命周期<br><img src="https://git-scm.com/book/en/v2/book/02-git-basics/images/lifecycle.png" alt="life-cycle"></li>
</ul>
<h3 id="4-3-git-add命令"><a href="#4-3-git-add命令" class="headerlink" title="4.3 git add命令"></a>4.3 git add命令</h3><h4 id="4-3-1-跟踪新文件"><a href="#4-3-1-跟踪新文件" class="headerlink" title="4.3.1 跟踪新文件"></a>4.3.1 跟踪新文件</h4><p>通过<code>$ git add filename</code>、<code>$ git add pathname</code>可分别跟踪某个文件和某个路径下的所有文件，或者通过<code>$ git add .</code>来跟踪所有文件。</p>
<h4 id="4-3-2-暂存已修改文件"><a href="#4-3-2-暂存已修改文件" class="headerlink" title="4.3.2 暂存已修改文件"></a>4.3.2 暂存已修改文件</h4><p>与上述方法相同</p>
<p>因此，<code>git add</code>具有多种功能，可理解为<strong>向下次提交中添加内容</strong></p>
<h3 id="4-4-git-status命令"><a href="#4-4-git-status命令" class="headerlink" title="4.4 git status命令"></a>4.4 git status命令</h3><p>该命令用于查看文件状态<br>也可通过<code>$ git status -s</code>或者<code>$ git status --short</code>查看简写的文件状态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git status -s</div><div class="line">M README</div><div class="line">MM Rakefile</div><div class="line">A  lib/git.rb</div><div class="line">M  lib/simplegit.rb</div><div class="line">?? LICENSE.txt</div></pre></td></tr></table></figure>
<p>各种记号的解释如下：</p>
<ul>
<li>??：未跟踪文件</li>
<li>A：新添加到暂存区的文件</li>
<li>_M：文件被修改但未添加到暂存区</li>
<li>M_：文件被修改且已添加到暂存区</li>
<li>MM：文件被修改且已添加到暂存区后又被修改</li>
</ul>
<h3 id="4-5-gitignore文件"><a href="#4-5-gitignore文件" class="headerlink" title="4.5 .gitignore文件"></a>4.5 .gitignore文件</h3><p>忽略文件的具体格式可见<a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93#忽略文件" target="_blank" rel="external">忽略文件</a></p>
<h3 id="4-6-git-diff命令"><a href="#4-6-git-diff命令" class="headerlink" title="4.6 git diff命令"></a>4.6 git diff命令</h3><p>git diff命令用于查看文件的修改，与git status相比可以具体显示修改的内容。</p>
<ul>
<li><code>$ git diff</code>显示的是已修改但未暂存的文件内容</li>
<li><code>$ git diff --cached</code>或<code>$ git diff --staged</code>查看已暂存但未提交的内容</li>
</ul>
<h3 id="4-7-git-commit命令"><a href="#4-7-git-commit命令" class="headerlink" title="4.7 git commit命令"></a>4.7 git commit命令</h3><p>通过git commit命令可将暂存区内的文件进行提交，而未暂存的文件则不会被提交。<br>可用<code>$ git commit</code>命令按提示完成提交或直接通过<code>$ git commit -m &quot;yourComments&quot;</code>进行提交说明并提交。<br>若想对所有已暂存和未暂存的文件进行提交可使用<code>$ git commit -a -m &quot;yourComments&quot;</code>进行提交，这样可简化操作步骤。</p>
<h3 id="4-8-移除文件"><a href="#4-8-移除文件" class="headerlink" title="4.8 移除文件"></a>4.8 移除文件</h3><p>移除文件需要git remove操作。</p>
<ul>
<li>通过<code>$ git rm fileName</code>即可将文件移出git版本控制并同时删除工作区中的文件，之后执行commit操作提交即可。</li>
<li>若是直接手动将文件删除，此时文件将会处于未暂存状态，通过git add或git rm操作便可进入已暂存状态，之后执行commit操作即可。</li>
<li>若文件进过修改并送入暂存区，需要用<code>$ git rm -f fileName</code>才能强制删除或通过上述第一种方式删除。</li>
<li>若是要将文件从git版本控制中删除但又不想从工作区中删除，则可通过<code>$ git rm --cached fileName</code>命令来实现。</li>
</ul>
<h3 id="4-9-移动文件"><a href="#4-9-移动文件" class="headerlink" title="4.9 移动文件"></a>4.9 移动文件</h3><p>移动文件操作通过<code>$ git mv fileFrom fileTo</code>来实现，该操作执行过程实际上是执行了删除fileFrom文件之后添加fileTo文件。</p>
<h3 id="4-10-撤销操作"><a href="#4-10-撤销操作" class="headerlink" title="4.10 撤销操作"></a>4.10 撤销操作</h3><ol>
<li><p>修改提交文件</p>
<ul>
<li>若提交后发现漏掉其他文件，可通过<code>$ git commit --amend</code>操作将当前暂存区的文件加入上次提交中，相当于只存在一次提交。</li>
<li>若是想修改提交文件的提交信息，可通过<code>$ git commit --amend -m &quot;newComments&quot;</code></li>
</ul>
</li>
<li><p>取消暂存文件</p>
<ul>
<li>通过<code>$ git reset HEAD fileName</code>可将文件从暂存区中移除，进入未暂存状态。</li>
</ul>
</li>
<li><p>取消已修改文件</p>
<ul>
<li>通过<code>$ git checkout -- fileName</code>将已修改的文件还原至上一次未修改时的状态。</li>
</ul>
</li>
</ol>
<h3 id="4-11-远程仓库"><a href="#4-11-远程仓库" class="headerlink" title="4.11 远程仓库"></a>4.11 远程仓库</h3><p>git项目的协作时会用到远程仓库，当克隆一个项目时，会有一个默认的名为<strong>origin</strong>的远程仓库。</p>
<ul>
<li>可通过<code>$ git remote</code>查看所有远程仓库或<code>$ git remote -v</code>查看所有远程仓库的具体信息。通过<code>$ git remote show remoteName</code>查看指定远程仓库的详细信息。</li>
<li>通过<code>$ git remote add shortNameForTheRemoteRepository RepositoryUrl</code></li>
<li>通过<code>$ git fetch shortName</code>可获取该远程仓库中的所有信息，但不会合并或修改当前工作区的文件</li>
<li>通过<code>$ git pull</code>命令获取远程仓库的数据并合并到当前分支，默认情况下，本地的master分支会跟踪远程仓库的master分支。</li>
<li>通过<code>$ git push remoteName branchName</code>将当前分支推送到指定远程仓库的指定分支上。</li>
<li>重命名远程仓库可使用<code>$ git remote rename originalName currentName</code></li>
<li>删除远程仓库可使用<code>$ git remote rm repositoryName</code></li>
</ul>
<h2 id="5-git分支"><a href="#5-git分支" class="headerlink" title="5. git分支"></a>5. git分支</h2><p>使用分支可以将开发工作从主线上进行分离，git的默认分支是<strong>master</strong>分支。git使用<strong>HEAD</strong>指针指向当前分支，可看做当前分支的一个别名。</p>
<h3 id="5-1-创建分支"><a href="#5-1-创建分支" class="headerlink" title="5.1 创建分支"></a>5.1 创建分支</h3><p>创建分支实际上就是创建了一个指向当前项目的指针，通过<code>$ git branch</code>命令可以查看当前分支，<code>$ git branch branchName</code>用于创建分支。</p>
<h3 id="5-2-切换分支"><a href="#5-2-切换分支" class="headerlink" title="5.2 切换分支"></a>5.2 切换分支</h3><p>命令<code>$ git checkout branchName</code>用于切换分支，切换分支后当前的工作区的文件也会随之改变。<br><strong>git分支是以提交的文件为基础的，一般情况下在修改文件后只有当提交了文件才能切换到另一个分支，但也有特殊情况，以branch1和branch2两个分支为例，若在branch1中添加了新文件，此时切换到branch2分支可以看到该文件，若此时提交则该文件属于branch2分支，再次切回branch1中不会保留该文件</strong></p>
<h3 id="5-3-删除分支"><a href="#5-3-删除分支" class="headerlink" title="5.3 删除分支"></a>5.3 删除分支</h3><p>通过<code>$ git branch -d branchName</code>可以删除该分支</p>
<h3 id="5-4-分支合并"><a href="#5-4-分支合并" class="headerlink" title="5.4 分支合并"></a>5.4 分支合并</h3><p>首先通过<code>$ git checkout branchName</code>切换到某一分支，如master分支，接下来执行<code>$ git merge branchName</code>将对应分支合并到master中。<br><strong>合并过程中如果两个分支对同一个文件进行了操作，则会产生冲突，需要手动解决，产生冲突的内容会在工作区中的相应文件中被标记出来，需要自己去判断保留哪一份修改，之后执行提交即可。</strong></p>
<h3 id="5-5-跟踪远程分支"><a href="#5-5-跟踪远程分支" class="headerlink" title="5.5 跟踪远程分支"></a>5.5 跟踪远程分支</h3><p>若想跟踪远程分支可以通过<code>$ git checkout --track remoteRepository/remoteBranch</code>，也可通过<code>$ git checkout -b branchName remoteRepository/remoteBranch</code>新建分支并跟踪远程分支，两者的不同点只是新建分支的名字不同。<br>若本地已有分支，则可通过<code>$ git branch -u remoteRepository/remoteBranch</code>添加或修改跟踪。<br>通过<code>$ git branch -vv</code>命令可以查看远程分支的跟踪信息。</p>
<h3 id="5-6-删除远程分支"><a href="#5-6-删除远程分支" class="headerlink" title="5.6 删除远程分支"></a>5.6 删除远程分支</h3><p>命令<code>$ git push remoteRepository --delete remoteBranch</code>可用于删除远程分支。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS实现元素的垂直居中]]></title>
      <url>http://arlendp.me/web/css/element-vertical-centering-by-css/</url>
      <content type="html"><![CDATA[<p>垂直居中指的是将元素在垂直方向上相对于父级元素达到一种居中的效果，在我们平时的布局中也会经常碰到垂直居中，在这里总结了下通过css实现垂直居中的各种常见方法，在使用各种方法时也要考虑到使用的场景。<br><a id="more"></a></p>
<p>以下css样式所应用到的html代码均如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;content&quot;&gt;</div><div class="line">    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>要达到的效果是box相对于content实现垂直居中。</p>
<p>以下是各种实现方法总结：</p>
<h2 id="1-元素高度已知"><a href="#1-元素高度已知" class="headerlink" title="1. 元素高度已知"></a>1. 元素高度已知</h2><ol>
<li><p>已知尺寸的块可以通过绝对定位和margin进行垂直居中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.content &#123;</div><div class="line">    display: relative;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">.content .box &#123;</div><div class="line">    display: absolute;</div><div class="line">    height: 100px;</div><div class="line">    top: 50%;</div><div class="line">    margin-top: -50px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 注意：通过这种方式元素被设置成了绝对定位，脱离了文档流，会对后面的元素位置产生影响。</p>
</li>
<li><p>通过在box前设置一个浮动的空块来实现垂直居中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.floater &#123;</div><div class="line">    float: left;</div><div class="line">    height: 50%;</div><div class="line">    margin-bottom: -100px;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">.content .box &#123;</div><div class="line">    clear: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 注意：通过这种方式多用了一个空元素，同时因为使用了浮动元素所以应记得清除。</p>
</li>
</ol>
<h2 id="2-元素高度未知"><a href="#2-元素高度未知" class="headerlink" title="2. 元素高度未知"></a>2. 元素高度未知</h2><ol>
<li><p>通过table-cell元素的垂直居中属性实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.content &#123;</div><div class="line">     display: table;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> .content .box &#123;</div><div class="line">    display: table-cell;</div><div class="line">    vertical-align: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 或直接通过table布局，table-cell的vertical-align:middle默认属性，但两者具有区别。</p>
</li>
<li><p>通过after或before伪类和vertical-align实现垂直居中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.content .box &#123;</div><div class="line">    width: auto;</div><div class="line">    height: auto;</div><div class="line">    display: inline-block;</div><div class="line">    vertical-align: middle;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.content:after &#123;</div><div class="line">    content: &quot;&quot;;</div><div class="line">    height: 100%;</div><div class="line">    width: 0;</div><div class="line">    display: inline-block;</div><div class="line">    vertical-align: middle;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 注意：定位元素需要设置为inline-block，同时都需要设置vertical-align:center属性。</p>
</li>
<li><p>通过margin:auto自动填充外边距实现垂直居中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.content &#123;</div><div class="line">    position:relative;</div><div class="line"> &#125;</div><div class="line"></div><div class="line">.content .box &#123;</div><div class="line">    position: absolute;</div><div class="line">    height: 200px;</div><div class="line">    top: 0;</div><div class="line">    bottom: 0;</div><div class="line">    margin-top: auto;</div><div class="line">    margin-bottom: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 注意：因为使用了绝对定位脱离了文档流，要考虑到对父元素和兄弟元素位置的影响。</p>
</li>
<li><p>通过transform属性的translateY()实现垂直居中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.content &#123;</div><div class="line">    position: relative;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> .content .box &#123;</div><div class="line">    position: absolute;</div><div class="line">    top: 50%;</div><div class="line">    transform: translateY(-50%);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p> 注意：使用了绝对定位，元素脱离文档流。同时使用时注意兼容性，不支持IE9以下的浏览器，对于部分版本浏览器需加上-ms-、-webkit-等前缀。</p>
</li>
<li><p>通过flexbox实现垂直居中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.content &#123;</div><div class="line">    display: flex;</div><div class="line">    flex-direction: column;</div><div class="line">    justify-content: center;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p> 注意：弹性盒改变了块模型，它可以自动调整子元素使得定位子元素更加容易。它有自己的一些属性，使用了另一种不同的布局逻辑，会使部分元素属性失效，如float和vertical-align。</p>
</li>
</ol>
<p><strong>小结：对于元素的垂直居中的情况判断一般是以该元素的高度是否已知，对于高度已知的情况，上述通过绝对定位和margin—top或通过增加一个浮动的空块均可解决，对于高度未知的情况，通过table布局、vartical-align属性、弹性盒、绝对定位与margin:auto的配合使用或是transfer属性都可实现垂直居中的布局。</strong></p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>http://arlendp.me/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>http://arlendp.me/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
